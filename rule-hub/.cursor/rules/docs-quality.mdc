---
description: NeMo RL documentation quality rules for spelling, grammar, punctuation, and style consistency.
globs: ["docs/**/*.md", "*.md"]
alwaysApply: false
---

# NeMo RL Documentation Quality Rules

When working with NeMo RL documentation, ensure the following quality standards:

## Documentation Standards

### Spelling and Grammar
- Check all documentation files for spelling errors
- Ensure proper grammar and sentence structure
- Use consistent terminology throughout
- Verify technical terms are spelled correctly (e.g., "NeMo RL", "DPO", "GRPO", "SFT")

### Punctuation Rules
- Use Oxford comma in lists for consistency
- Add periods at the end of complete sentences in bullet points
- Use proper quotation marks and apostrophes
- Ensure consistent use of colons and semicolons

### Style Guidelines
- Use "such as" instead of "like" for formal documentation
- Maintain consistent capitalization in headings
- Use active voice where possible
- Keep sentences concise and clear

### Technical Writing Standards
- Use consistent formatting for code blocks and inline code
- Ensure proper linking and cross-references
- Maintain consistent frontmatter structure
- Use appropriate difficulty levels and tags

## Common Issues to Check

### Spelling
- "NeMo RL" (not "Nemo RL" or "nemo rl" in text content only)
- "reinforcement learning" (not "Reinforcement Learning" unless at start of sentence)
- "fine-tuning" (hyphenated)
- "state-of-the-art" (hyphenated)
- "machine learning" (lowercase unless at start of sentence)

### Grammar
- Subject-verb agreement
- Proper use of articles (a, an, the)
- Consistent tense usage
- Parallel structure in lists

### Punctuation
- Oxford comma in lists
- Proper use of semicolons and colons
- Consistent quotation marks
- Proper apostrophe usage

## Documentation Structure

### Frontmatter Requirements
- All documentation files must have proper frontmatter
- Include description, tags, categories, personas, difficulty, content_type, modality
- Ensure tags are relevant and consistent

### Content Organization
- Use clear, descriptive headings
- Maintain logical flow and structure
- Include appropriate code examples
- Provide context and explanations

### Links and References
- Verify all internal links work
- Use consistent link formatting
- Include proper cross-references
- Maintain up-to-date external links

## Quality Checklist

When reviewing documentation, check for:
- [ ] Spelling accuracy
- [ ] Grammar correctness
- [ ] Punctuation consistency
- [ ] Technical accuracy
- [ ] Clear and concise writing
- [ ] Proper formatting
- [ ] Working links
- [ ] Consistent terminology
- [ ] Appropriate difficulty level
- [ ] Complete frontmatter

## Common Corrections

### Spelling Fixes
- "NeMo RL"  "NeMo RL" (correct in text, not code/links)
- "reinforcement learning"  "reinforcement learning" (lowercase)
- "fine tuning"  "fine-tuning" (hyphenated)
- "state of the art"  "state-of-the-art" (hyphenated)

### Grammar Fixes
- "This guide will walk you through your first training run"  "This guide walks you through your first training run" (active voice)
- "You can use this to..."  "Use this to..." (more direct)
- "It is important to..."  "Important:..." (more concise)

### Punctuation Fixes
- "DPO, GRPO and SFT"  "DPO, GRPO, and SFT" (Oxford comma)
- "For example:"  "For example," (comma instead of colon)
- "Such as DPO, GRPO"  "Such as DPO and GRPO" (no comma before "and")

## Documentation Categories

### Getting Started
- Clear, step-by-step instructions
- Prerequisites clearly stated
- Expected outcomes explained
- Troubleshooting included

### Guides
- Comprehensive coverage of topics
- Practical examples provided
- Best practices highlighted
- Common pitfalls addressed

### Reference
- Complete and accurate information
- Consistent formatting
- Easy to scan and find information
- Cross-references included

### Advanced Topics
- Detailed technical explanations
- Mathematical foundations included
- Implementation details provided
- Research context given

## File Organization

### Directory Structure
- /docs/about/ - Core concepts and overview
- /docs/get-started/ - Installation and quick start
- /docs/guides/ - Training algorithms and workflows
- /docs/advanced/ - Advanced topics and research
- /docs/references/ - API and configuration reference
- /docs/learning-resources/ - Tutorials and examples

### File Naming
- Use kebab-case for file names
- Descriptive and clear names
- Consistent with directory structure
- Avoid special characters

## Content Guidelines

### Writing Style
- Clear and concise
- Technical but accessible
- Consistent tone throughout
- Professional but not overly formal

### Code Examples
- Complete and runnable
- Properly formatted
- Include comments where helpful
- Show expected outputs

### Images and Diagrams
- Clear and high quality
- Properly labeled
- Consistent style
- Accessible descriptions

## Review Process

### Self-Review
- Read through content carefully
- Check for clarity and accuracy
- Verify technical details
- Test code examples

### Peer Review
- Have others review content
- Gather feedback on clarity
- Check for completeness
- Verify accuracy

### Final Review
- Check all links work
- Verify formatting consistency
- Ensure proper metadata
- Test build process

## Maintenance

### Regular Updates
- Keep content current
- Update examples as needed
- Maintain accuracy
- Add new information

### Version Control
- Use meaningful commit messages
- Track changes systematically
- Maintain history
- Tag releases appropriately

## Tools and Resources

### Spell Checkers
- Use built-in spell checkers
- Consider language-specific tools
- Check technical terms
- Verify proper nouns

### Grammar Checkers
- Use grammar checking tools
- Review suggestions carefully
- Maintain technical accuracy
- Preserve intended meaning

### Link Checkers
- Verify internal links
- Check external links
- Maintain references
- Update broken links

## Quality Metrics

### Readability
- Clear sentence structure
- Appropriate complexity
- Logical organization
- Engaging content

### Accuracy
- Technically correct
- Up-to-date information
- Proper examples
- Working code

### Completeness
- Covers all necessary topics
- Includes examples
- Provides context
- Addresses common issues

### Consistency
- Uniform style
- Consistent terminology
- Standardized formatting
- Coherent structure
