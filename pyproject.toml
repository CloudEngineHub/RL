[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nemo-reinforcer"
dynamic = [
    "version",
    "readme",
]
description = "Nemo-Reinforcer: A Scalable and Efficient Post-Training Library for Models Ranging from 1 GPU to 1000s, and from Tiny to >100B Parameters"
requires-python = ">=3.10"
license = {text = "Apache 2.0"}
dependencies = [
    # setuptools is here just so we can install TE
    "setuptools",
    "torch==2.6.0",
    "colored==2.2.3",
    "ray[default]==2.43.0",
    "transformers",
    "wandb",
    "numpy",
    "datasets",
    "rich",
    "math-verify",
    "accelerate>=0.26",
    "tensorboard",
    "omegaconf",
    "torchdata",
    "nvidia-ml-py",
    "hydra-core",
]

[tool.setuptools]
packages = ["nemo_reinforcer"]

[tool.setuptools.dynamic]
version = {attr = "nemo_reinforcer.__version__"}  # any module attribute compatible with ast.literal_eval
readme = {file = "README.md", content-type = "text/markdown"}

[tool.uv.sources]
megatron-core = { git = "https://github.com/NVIDIA/Megatron-LM", rev = "222adb83439f3aac15e6e637a3fafc2929021948" }
#transformer-engine = { git = "https://github.com/NVIDIA/TransformerEngine.git", tag = "v1.13"}
#transformer-engine = { path = "3rdparty/TransformerEngine" }



[tool.uv]
#default-groups = ["build"] # (maybe don't need?)
no-build-isolation-package = ["transformer-engine"]

[project.optional-dependencies]
vllm = [
    "vllm==0.8.4",
]
mcore = [
    #"megatron-core",
    

    # also need cudnn (https://developer.nvidia.com/cudnn-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04&target_type=deb_network)
    # wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.1-1_all.deb
    # sudo dpkg -i cuda-keyring_1.1-1_all.deb
    # sudo apt-get update
    # sudo apt-get install cudnn-cuda-12
    #
    # 1. uv pip install transformer-engine[pytorch] --no-build-isolation
    #    works, but get: RuntimeError: /TransformerEngine/transformer_engine/common/gemm/cublaslt_gemm.cu:287 in function cublas_gemm: cuBLAS Error: an unsupported value or parameter was passed to the function
    #    related: https://github.com/NVIDIA/TransformerEngine/issues/1585
    #    i guess 2.2.0 is too new?
    #    i guess 2.1.0 is too new...
    # 2. uv pip install transformer-engine[pytorch]==1.13.0 --no-build-isolation
    #    so this works. but not sure about the below
    "transformer-engine[pytorch]==1.13.0",
]

# https://docs.astral.sh/uv/concepts/projects/config/#build-isolation
# NOTE: this doesn't seem to recognize the extra for pytorch
#[[tool.uv.dependency-metadata]]
#name = "transformer-engine"
##version = "1.13.0"
#requires-dist = ["setuptools", "torch", "einops"]
#provides-extras = ["pytorch"]

[dependency-groups]

build = [
    "torch==2.6.0",
    "setuptools",
    "packaging",
    "einops"
]
docs = [
    "sphinx",
    "sphinx-autobuild",  # For live doc serving while editing docs
    "sphinx-autodoc2",  # For documenting Python API
    "sphinx-copybutton",  # Adds a copy button for code blocks
    "myst_parser",  # For our markdown docs
    "nvidia-sphinx-theme",  # Our NVIDIA theme
]
dev = [
    "pre-commit==3.6.0",
    "ruff==0.9.9",
]
test = [
    "pytest>=7.0.0",
    "pytest-timeout",
    "pytest-cov",
]


[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
)/
'''

[tool.pytest.ini_options]
addopts = "--cov=nemo_reinforcer --cov-report=term --cov-report=json -s -rA -x"
testpaths = ["tests"]
python_files = "test_*.py"

[tool.ruff.lint]
# Enable all `pydocstyle` rules, limiting to those that adhere to the
# Google convention via `convention = "google"`, below.
select = ["D"]

# On top of the Google convention, disable `D417`, which requires
# documentation for every function parameter.
# TODO: Remove D10 once we are about to release to get all the docstrings written
ignore = ["D417", "D10"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# Section to exclude errors for different file types
[tool.ruff.per-file-ignores]
# Ignore all directories named `tests`.
"tests/**" = ["D"]
# Ignore all files that end in `_test.py`.
"*_test.py" = ["D"]

#[tool.uv]
# Users may use different link-modes depending on their scenario:
#  --link-mode=hardlink (default on linux; may get warnings about switching to --link-mode copy if uv cache and venv on different file-systems)
#  --link-mode=copy (slower but more reliable; supresses warning)
#  --link-mode=symlink (fastest option when uv cache and venv on different file-system; caveat: venv is brittle since it depends on the environment/container)
#
#link-mode = "symlink"
