# SFT Algorithm Configuration
sft:
  max_num_epochs: 3
  max_num_steps: 60
  val_period: 10
  val_batches: 8
  val_global_batch_size: 128
  val_micro_batch_size: 1
  val_at_start: true
  seed: 42

checkpointing:
  enabled: true
  checkpoint_dir: "results/sft_nemotron_super_49b"
  metric_name: "val_loss"
  higher_is_better: false
  keep_top_k: 100
  save_period: 500
  checkpoint_must_save_by: null

policy:
  # model_name: Qwen/Qwen2.5-7B-Instruct
  # tokenizer:
  #   name: Qwen/Qwen2.5-7B-Instruct
  model_name: "/lustre/fsw/portfolios/coreai/users/shashankv/models/llama-3_3-nemotron-49b-instruct-128k-v1_2-hf"
  tokenizer:
    name: "nvidia/Llama-3_3-Nemotron-Super-49B-v1_5"
  max_total_sequence_length: 1024
  precision: "bfloat16"
  train_global_batch_size: 128
  train_micro_batch_size: 8

  dtensor_cfg:
    _v2: true
    activation_checkpointing: true
    context_parallel_size: 1
    cpu_offload: false
    enabled: true
    sequence_parallel: false
    tensor_parallel_size: 8
    custom_parallel_plan: null

  megatron_cfg:
    enabled: false

  dynamic_batching:
    enabled: false

  sequence_packing:
    enabled: false
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    algorithm: "modified_first_fit_decreasing"
    sequence_length_round: 64
  

  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.dtensor_cfg.tensor_parallel_size}
  max_grad_norm: null

  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 2e-5
      weight_decay: 0.01
      betas: [0.9, 0.98]
      eps: 1e-8
      # when using Dtensor, we need to set foreach
      # and fused to False
      foreach: False
      fused: False

# data:
#   add_bos: true
#   add_eos: true
#   add_generation_prompt: false
#   dataset_name: "tulu3_sft_mixture"
#   cache_dir: "/lustre/fsw/portfolios/coreai/users/gvenkatakris/data-cache"
#   max_input_seq_length: 1024
#   max_samples: 10000
#   shuffle: true
#   test_size: 0.05

data:
  max_input_seq_length: ${policy.max_total_sequence_length}
  add_bos: true
  add_eos: true
  add_generation_prompt: false
  shuffle: true

  dataset_name: "squad"
  # You can use custom response datasets for training and validation. For example:
  #   data:
  #     dataset_name: ResponseDataset
  #     train_data_path: <PathToTrainingDataset>  # e.g., /path/to/local/dataset.jsonl or hf_org/hf_dataset_name (HuggingFace)
  #     val_data_path: <PathToValidationDataset>
  #     input_key: <QuestionKey>, default is "input"
  #     output_key: <AnswerKey>, default is "output"
  #     train_split: <TrainSplit>, default is None  # used for HuggingFace datasets
  #     val_split: <ValSplit>, default is None  # used for HuggingFace datasets
  # See https://github.com/NVIDIA-NeMo/RL/blob/main/docs/guides/sft.md#datasets for more details.

  ## unused with squad dataset
  prompt_file: null
  split: null
  output_key: null
  seed: null

logger:
  log_dir: "logs"  # Base directory for all logs
  wandb_enabled: true # Make sure you do a ``wandb login [Your API key]'' before running
  tensorboard_enabled: false
  mlflow_enabled: false
  monitor_gpus: false  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "sft-nemotron-joyang"
    name: "sft-${data.dataset_name}-nemotron-super-49b-joyang"
  tensorboard:
    log_dir: "tb_logs-openmathinstruct-nemorl-1M_train"
  mlflow:
    experiment_name: "sft-dev"
    run_name: "openmathinstruct-nemorl-1M_train"
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)

cluster:
  gpus_per_node: 8
  num_nodes: 4
