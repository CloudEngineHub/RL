# SFT Algorithm Configuration
sft:
  ## total number of steps to train will equal
  ## min((max_num_epochs * len(train_dataloader)), max_num_steps)
  max_num_epochs: 1
  max_num_steps: 60

  val_period: 10
  val_batches: 1
  val_global_batch_size: 32
  val_micro_batch_size: 1
  val_at_start: true
  seed: 42

checkpointing:
  enabled: false
  checkpoint_dir: "results/sft_megatron"
  metric_name: "val_loss"
  higher_is_better: false
  keep_top_k: 3
  save_period: 10

policy:
  model_name: "Qwen/Qwen2.5-1.5B-Instruct"
  tokenizer:
    name: ${policy.model_name} ## specify if you'd like to use a tokenizer different from the model's default
    chat_template: "{% for message in messages %}{%- if message['role'] == 'system'  %}{{'Context: ' + message['content'].strip()}}{%- elif message['role'] == 'user'  %}{{' Question: ' + message['content'].strip() + ' Answer:'}}{%- elif message['role'] == 'assistant'  %}{{' ' + message['content'].strip()}}{%- endif %}{% endfor %}"
  train_global_batch_size: 512
  train_micro_batch_size: 2
  generation_batch_size: 64 # Only used when generating using megatron backend
  logprob_batch_size: 4
  max_total_sequence_length: 1024
  precision: "bfloat16"
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  expert_tensor_parallel_size: 1
  sequence_parallel: True
  pipeline_dtype: "float32"
  context_parallel_size: 1

  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.tensor_model_parallel_size}
  max_grad_norm: 1.0

  dtensor_cfg:
    enabled: false


  megatron_cfg:
    enabled: true
    empty_unused_memory_level: 1
    # converter_type: "Qwen2ForCausalLM"
    converter_type: "DeepSeek"
    
    optimizer:
      optimizer: "adam"
      lr: 5.0e-6
      min_lr: 5.0e-7
      weight_decay: 0.01
      bf16: false
      fp16: false
      params_dtype: "float32"

      #adam
      adam_beta1: 0.9
      adam_beta2: 0.999
      adam_eps: 1e-8

      #sgd
      sgd_momentum: 0.9

      #distributed optimizer
      use_distributed_optimizer: true
      use_precision_aware_optimizer: true
      
      clip_grad: ${policy.max_grad_norm}
      
    scheduler:
      start_weight_decay: ${policy.megatron_cfg.optimizer.weight_decay}
      end_weight_decay: ${policy.megatron_cfg.optimizer.weight_decay}
      weight_decay_incr_style: "constant"
      lr_decay_style: "constant"
      lr_decay_iters: null
      lr_warmup_iters: 50
      lr_warmup_init: 5.0e-7
    
    dist_cfg:
      use_torch_fsdp2: true
    
data:
  max_input_seq_length: ${policy.max_total_sequence_length}
  dataset_name: "squad"
  add_bos: true
  add_eos: true

logger:
  log_dir: "logs"  # Base directory for all logs
  wandb_enabled: true # Make sure you do a ``wandb login [Your API key]'' before running
  tensorboard_enabled: false
  monitor_gpus: false  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "sft-dev-yifu"
    name: "megatron-sft-dev-${data.dataset_name}"
  tensorboard:
    log_dir: "tb_logs-sft-dev-${data.dataset_name}"
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)

cluster:
  gpus_per_node: 1
  num_nodes: 1
