# QUACK Algorithm Configuration
quack:
  num_prompts_per_step: 128
  num_generations_per_prompt: 4
  num_quacks_per_step: 128
  num_critic_generations_per_prompt: 8
  train_dataset_size: ${mul:${quack.num_quacks_per_step}, ${quack.num_critic_generations_per_prompt}}   # unused
  critic_inference_batch_size: 256
  critic_refit_period: 10
  max_rollout_turns: 1 # for multi-turn rollouts. Math Environments just have 1 turn (answering the question)
  max_num_steps: 1000000
  val_period: 10
  val_at_start: false
  max_val_samples: 256
  val_batch_size: 256
  verdict_loss_correction: true   # if true, we only train on samples where the math environment and the critique agree on the correctness of the answer
  hint_critic: true   # if true, we hint the critic with the correct verdict
  #train_dataset_batch_size: 32

checkpointing:
  enabled: true
  checkpoint_dir: "results/quack"
  metric_name: "val_reward"
  higher_is_better: true
  keep_top_k: 3
  save_period: 10

actor:
  model_name: "Qwen/Qwen3-8B"
  tokenizer:
    name: ${actor.model_name} ## specify if you'd like to use a tokenizer different from the model's default
    chat_template: null
  train_global_batch_size: 256
  train_micro_batch_size: 4
  generation_batch_size: 32 # Only used when generating using HF backend
  logprob_batch_size: 4
  max_total_sequence_length: 4096
  precision: "bfloat16"
  fsdp_offload_enabled: false
  activation_checkpointing_enabled: false
  refit_buffer_size_gb: 4 # used for refitting inference engine, the unit is GB

  dtensor_cfg:
    enabled: true
    cpu_offload: False
    sequence_parallel: true
    activation_checkpointing: false
    tensor_parallel_size: 8

  dynamic_batching:
    enabled: false
    train_mb_tokens: ${mul:${actor.max_total_sequence_length}, ${actor.train_micro_batch_size}}
    logprob_mb_tokens: ${mul:${actor.max_total_sequence_length}, ${actor.logprob_batch_size}}
    sequence_length_round: 64
  
  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${actor.dtensor_cfg.tensor_parallel_size}
  max_grad_norm: 1.0

  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 5.0e-6
      weight_decay: 0.01
      betas: [0.9, 0.999]
      eps: 1e-8
      # when using Dtensor, we need to set foreach
      # and fused to False
      foreach: False
      fused: False

  scheduler:
    - name: "torch.optim.lr_scheduler.LinearLR"
      kwargs:
        start_factor: 0.1
        end_factor: 1.0
        total_iters: 50
    - name: "torch.optim.lr_scheduler.ConstantLR"
      kwargs:
        factor: 1.0
        total_iters: 10000000000
    - milestones: [50]

  generation:
    backend: "vllm"
    max_new_tokens: 1600
    temperature: 1.0
    top_p: 0.95
    top_k: null
    stop_token_ids: null
    stop_strings: null
    vllm_cfg:
      precision: ${actor.precision}
      tensor_parallel_size: 4
      gpu_memory_utilization: 0.65
      max_model_len: ${actor.max_total_sequence_length}
      # For most cases, use "dummy" to load the initial weights, since they will be overwritten during refit
      # For Gemma models, we need to use "auto" due to a vllm bug
      load_format: dummy

critic:
  num_nodes: null   # if null or 0, the critic will run on the actor cluster
  generation:
    backend: "vllm"
    max_new_tokens: 1600
    temperature: 1.0
    top_p: 0.95
    top_k: null
    stop_token_ids: null
    stop_strings: null
    vllm_cfg:
      precision: ${actor.precision}
      tensor_parallel_size: 4
      gpu_memory_utilization: 0.65
      max_model_len: ${actor.max_total_sequence_length}
      load_format: dummy

data:
  max_input_seq_length: ${actor.max_total_sequence_length} # upper bound, real truncation occurs at vllm.max_model_len
  prompt_file: "examples/prompts/math.txt"
  system_prompt_file: null
  dataset_name: "OpenMathInstruct-2"
  apply_chat_template: true

critic_data:
  max_input_seq_length: ${actor.max_total_sequence_length} # upper bound, real truncation occurs at vllm.max_model_len
  prompt_file: "examples/prompts/quack/critic.txt"
  system_prompt_file: null
  dataset_name: null  # we use data from replay buffer
  apply_chat_template: true

fit_data:
  max_input_seq_length: ${actor.max_total_sequence_length} # upper bound, real truncation occurs at vllm.max_model_len
  prompt_file: "examples/prompts/quack/fit.txt"
  system_prompt_file: null
  dataset_name: null  # we use data from replay buffer
  apply_chat_template: true

replay_buffer:
  buffer_size: 4096

env:
  math:
    num_workers: 8
  critic:
    num_workers: 8

logger:
  log_dir: "logs"  # Base directory for all logs
  num_val_samples_to_print: 0 # Number of validation samples to pretty print on terminal
  wandb_enabled: false
  tensorboard_enabled: false
  monitor_gpus: false  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "quack-math"
    name: "quack-logger-qwen-small"
  tensorboard: {}
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)

cluster:
  gpus_per_node: 8
  num_nodes: 4  # total numebr of nodes
