---
description: 
globs: 
alwaysApply: false
---
# NeMo RL Documentation Improvements Rules

## Overview

These rules are based on the successful transformation of NeMo RL documentation from a basic structure to a comprehensive, professional documentation system. Apply these principles when creating or improving NeMo RL technical documentation.

## Information Architecture & Organization

### Structure Guidelines

- **Use Hierarchical Information Architecture**: Organize content into clear sections (About, Get Started, Guides, Reference)
- **Implement User-Centric Organization**: Structure content by user needs and experience levels (researchers, MLEs, DevOps)
- **Apply Progressive Disclosure**: Present information from RL concepts to advanced distributed training
- **Create Multiple Entry Points**: Provide different navigation paths for different user types (SFT, GRPO, DPO users)

### Directory Structure Best Practices

```
docs/
├── about/           # NeMo RL overview, features, and architecture
├── get-started/     # Installation, Quickstart, and environment setup
├── guides/          # Training guides (SFT, GRPO, DPO, evaluation)
└── reference/       # API, CLI, configuration, and troubleshooting
```

## Content Development Standards

### Content Depth Requirements

- **Minimum Content Volume**: Aim for comprehensive coverage (200KB+ for NeMo RL project)
- **Expand Existing Content**: Target 150-200% growth in key areas (algorithms, distributed training, environments)
- **Add Missing Content**: Include troubleshooting, installation, quickstart, and glossary sections
- **Technical Depth**: Provide detailed technical capabilities for RL algorithms and distributed training

### Content Quality Standards

- **Source Code Verification**: Ensure documentation aligns with actual NeMo RL implementation
- **API Consistency**: Maintain consistent documentation of NeMo RL APIs and interfaces
- **Version Compatibility**: Include clear version requirements for PyTorch, Ray, and Transformers
- **Best Practices**: Incorporate RL and distributed training best practices

### Writing Quality Guidelines

- **Clear Language**: Explain RL concepts and distributed training in accessible language
- **Consistent Terminology**: Use standardized RL and NeMo RL terminology throughout
- **Logical Flow**: Present information from basic RL concepts to advanced NeMo RL features
- **Actionable Content**: Provide clear, actionable instructions for training and deployment

## Technical Documentation Infrastructure

### Sphinx Configuration Standards

- **Advanced Extensions**: Implement custom Sphinx extensions for enhanced functionality
- **MyST Parser**: Use Markdown support with advanced features for code examples
- **Theme Customization**: Apply professional themes with custom styling for RL content
- **Build Optimization**: Optimize build process for NeMo RL documentation

### Metadata & SEO Requirements

- **Structured Metadata**: Include comprehensive frontmatter with descriptions and tags
- **Search Optimization**: Optimize content for RL and NeMo RL search terms
- **Cross-References**: Implement internal linking between algorithms, environments, and tools
- **Version Tracking**: Use automated version management for NeMo RL releases

## User Experience Enhancements

### Visual Design Standards

- **Grid-Based Layouts**: Use modern card-based navigation for algorithms and environments
- **Interactive Elements**: Implement tabbed content for different training backends
- **Icon Integration**: Use icons for visual hierarchy in algorithm and environment sections
- **Responsive Design**: Ensure mobile-friendly layouts for code examples and configurations

### Content Presentation Guidelines

- **Progressive Disclosure**: Present information from basic RL to advanced NeMo RL features
- **Multiple Entry Points**: Create different paths for SFT, GRPO, and DPO users
- **Clear Call-to-Actions**: Include explicit next steps for training and evaluation
- **Consistent Formatting**: Maintain standardized structure across all NeMo RL documents

## NeMo RL Technical Capabilities Documentation

### Algorithm Documentation

- **SFT Implementation**: Document supervised fine-tuning capabilities and configurations
- **GRPO Implementation**: Document Group Relative Policy Optimization algorithm details
- **DPO Implementation**: Document Direct Preference Optimization features and usage
- **Loss Functions**: Document specialized RL loss functions and their applications

### Distributed Training Documentation

- **Ray Virtual Clusters**: Document Ray-based resource management and scaling
- **Worker Groups**: Document process isolation and management strategies
- **Multi-Node Training**: Document cluster setup and multi-node execution
- **Resource Optimization**: Document GPU memory and compute optimization techniques

### Model Backend Documentation

- **Hugging Face Integration**: Document HF model loading and training capabilities
- **Megatron-LM Support**: Document Megatron backend features and configurations
- **DTensor Support**: Document distributed tensor capabilities and setup
- **Model Conversion**: Document format conversion utilities and workflows

### Environment Documentation

- **Math Environment**: Document mathematical problem-solving environment
- **Game Environments**: Document sliding puzzle and other game environments
- **Custom Environments**: Document environment creation and extension
- **Evaluation Metrics**: Document environment-specific evaluation and benchmarking

## Developer Experience Standards

### Installation & Setup Documentation

- **Comprehensive Installation Guide**: Provide detailed setup for NeMo RL environments
- **Optional Dependencies**: Include guidance for Ray, Megatron-LM, and other optional components
- **Environment-Specific Instructions**: Provide setup for different platforms (local, cluster, cloud)
- **Verification Steps**: Include instructions for verifying NeMo RL installation and functionality

### Quickstart & Tutorials Standards

- **Hands-On Learning**: Create step-by-step tutorials for SFT, GRPO, and DPO training
- **Progressive Complexity**: Build from single-GPU to multi-node distributed training
- **Real-World Examples**: Use practical examples with Hugging Face models and datasets
- **Troubleshooting Integration**: Include built-in troubleshooting for common RL training issues

## Reference Documentation Requirements

### CLI Reference Standards

- **Comprehensive Coverage**: Document all NeMo RL command-line interfaces
- **Usage Examples**: Provide practical examples for training scripts and evaluation
- **Parameter Documentation**: Include detailed explanation of all training parameters
- **Integration Examples**: Show CLI integration with Ray, Slurm, and Kubernetes

### Troubleshooting & Support Documentation

- **Common Issues**: Cover frequently encountered RL training problems
- **Error Messages**: Provide detailed explanation of NeMo RL error messages
- **Debugging Techniques**: Include advanced debugging for distributed training
- **Support Resources**: Provide guidance for NeMo RL community support

## NeMo RL Content Expansion Guidelines

### Required New Content Areas

- **Algorithm Deep Dives**: Comprehensive guides for SFT, GRPO, and DPO
- **Environment Development**: Guide for creating custom RL environments
- **Distributed Training**: Advanced guide for multi-node and multi-GPU training
- **Model Optimization**: Guide for optimizing NeMo RL model performance
- **Evaluation Strategies**: Comprehensive evaluation and benchmarking guide
- **Production Deployment**: Guide for deploying NeMo RL models in production

### Content Volume Targets

- **Total Documentation**: Aim for 200KB+ of comprehensive NeMo RL documentation
- **Algorithm Guides**: Target 25KB+ for each major algorithm (SFT, GRPO, DPO)
- **Distributed Training**: Target 30KB+ with environment-specific guidance
- **Environment Guide**: Target 20KB+ with custom environment development
- **Reference Documentation**: Target 35KB+ for API, CLI, and configuration

## Implementation Checklist

### Before Creating Documentation

- [ ] Analyze existing NeMo RL documentation structure and identify gaps
- [ ] Define target user personas (researchers, MLEs, DevOps engineers)
- [ ] Plan hierarchical information architecture for RL content
- [ ] Identify required content areas for algorithms and environments
- [ ] Set up advanced Sphinx configuration with NeMo RL extensions

### During Build NeMo RL Documentation

- [ ] Implement progressive disclosure from RL basics to NeMo RL advanced features
- [ ] Create multiple entry points for different algorithm users
- [ ] Include comprehensive code examples with Hugging Face models
- [ ] Add structured metadata for RL and NeMo RL search optimization
- [ ] Implement interactive elements for algorithm comparison and selection

### After Documentation Creation

- [ ] Verify documentation against NeMo RL source code for accuracy
- [ ] Test navigation and user experience across different devices
- [ ] Validate internal links between algorithms, environments, and tools
- [ ] Review content for consistency with RL terminology and concepts
- [ ] Gather user feedback from NeMo RL community and iterate

## Success Metrics

### Content Quality Metrics

- **Completeness**: 90%+ coverage of all NeMo RL features and capabilities
- **Accuracy**: 100% alignment with NeMo RL source code implementation
- **Clarity**: User testing shows 85%+ comprehension rate for RL concepts
- **Usability**: Navigation success rate of 90%+ for target user personas

### Technical Infrastructure Metrics

- **Build Performance**: NeMo RL documentation builds in under 2 minutes
- **Search Functionality**: 95%+ search result relevance for RL and NeMo RL terms
- **Mobile Responsiveness**: 100% mobile compatibility for code examples
- **SEO Performance**: Top 3 search results for "NeMo RL" and related terms

### User Experience Metrics

- **Time to First Success**: Users achieve their first training run within 5 minutes
- **Navigation Efficiency**: Users find algorithm information within 3 clicks
- **Content Engagement**: 70%+ of users read beyond the landing page
- **Support Reduction**: 50%+ reduction in support requests for documented topics

## NeMo RL Specific Guidelines

### Algorithm Documentation Standards

- **Mathematical Foundations**: Include mathematical background for each algorithm
- **Implementation Details**: Document algorithm-specific implementation choices
- **Hyperparameter Tuning**: Provide guidance for algorithm-specific parameters
- **Performance Benchmarks**: Include performance comparisons and best practices

### Environment Documentation Standards

- **Environment Interface**: Document standard environment interfaces and methods
- **Reward Functions**: Explain reward function design and implementation
- **State Representations**: Document state space and observation formats
- **Action Spaces**: Document action space definitions and constraints

### Distributed Training Documentation Standards

- **Ray Configuration**: Document Ray cluster setup and configuration
- **Resource Allocation**: Explain GPU and memory allocation strategies
- **Communication Patterns**: Document inter-process communication in distributed training
- **Fault Tolerance**: Explain error handling and recovery in distributed scenarios

### Model Integration Standards

- **Hugging Face Models**: Document supported model architectures and requirements
- **Megatron Integration**: Explain Megatron-LM backend setup and usage
- **Custom Models**: Guide for integrating custom model architectures
- **Model Conversion**: Document format conversion between different backends
